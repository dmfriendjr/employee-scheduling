<h1>Employees</h1>
{{!--<a href="/timetable">Timetable</a> --}} 
{{message}}
<form method="post" action="/employees">
  <label for="name">Employee Name</label>
  <input type="text" name="name" value={{employeeName}}>
  <label for="phone_number">Phone Number</label>
  <input type="text" name="phone_number" value={{employeePhone}}>
  <label for="email">Email</label>
  <input type="Text" name="email" value={{employeeEmail}}>
  <button type="submit">Add Employee</button>
</form>


<ul>
  {{#each employees}}
  <li id={{id}}>
    {{name}} {{phone_number}} {{email}}
    <button class="deleteEmployee">Delete</button>
  </li>
  {{/each}}
</ul>
<button class="addShift">Add Shift</button>

<form action="/shifts" method="post">
  <select name="employee">
    {{#each employees}}
    <option value={{id}}>{{name}}</option>
    {{/each}}
  </select>
  <input type="text" name="shift_title" />
  <input type="datetime-local" name="start_date" />
  <input type="datetime-local" name="end_date" />
  <button type="submit">Add</button>
</form>

<form action="/shifts" method="get">
View Schedule Date:<input type="text" id="datepicker">
<button class="getShifts">Add</button>
</form>


<div class="timetable"></div>

<script>
 
  let timetable = new Timetable();
  
  var renderer = new Timetable.Renderer(timetable);
  timetable.addLocations(['D']);
  timetable.setScope(8, 7);
$("#datepicker").datepicker({
  onSelect: function(dateText) {
  $.ajax({
      method: 'GET',
      url: '/employees',
    }).then((employees) => {

      let employeeNames = employees.map(employee => employee.name);
      let employeeData = employees.map(employee => ({
        name: employee.name,
        id: employee.id
      }));

      $.ajax({
        method: 'GET',
        url: '/shifts/' + dateText,
      }).then((shifts) => {

        employeeData.forEach(employee => {
          let empShifts = shifts.filter(shift => shift.employeeId === employee.id);
          empShifts.forEach(shift => {
            let start = moment(shift.start_date);
            let end = moment(shift.end_date);
            console.log('Shift is:', shift);
            console.log('employee is:', employee);
            console.log(timetable);
            timetable.addEvent(shift.shift_title, employee.name, new Date(start.year(), start.month(), start.day(), start.hour(), start.minute()),
            new Date(end.year(), end.month(), end.day(), end.hour(), end.minute()), { url: '#' });
          })
        });
        renderer.draw('.timetable');
      });
    });
    }
});;

  $('.deleteEmployee').on('click', (event) => {
    console.log(event.target.parentNode.id);
    $.ajax({
      method: 'DELETE',
      url: '/employees',
      contentType: 'application/json',
      data: JSON.stringify({
        id: event.target.parentNode.id
      }),
    }).then(() => {
      location.reload();
    });
  });

 
</script>